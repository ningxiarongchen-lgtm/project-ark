name: 📚 Documentation Health Check

on:
  # 定时触发 - 每月1号 UTC 00:00 (北京时间 08:00)
  schedule:
    - cron: '0 0 1 * *'
  
  # 允许手动触发
  workflow_dispatch:
  
  # 可选：在 Pull Request 时也运行（如果 PR 涉及文档）
  pull_request:
    paths:
      - 'docs/**'
      - 'scripts/check_docs_freshness.js'
      - '.github/workflows/docs-health-check.yml'

jobs:
  check-docs:
    name: Check Documentation Freshness
    runs-on: ubuntu-latest
    
    steps:
      # 1. 检出代码（必须获取完整历史以便 Git log 工作）
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整 Git 历史，脚本需要 Git log
      
      # 2. 设置 Node.js 环境
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      
      # 3. 安装依赖（如果需要）
      - name: 📦 Install dependencies
        run: |
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            echo "No package-lock.json found, skipping dependencies installation"
          fi
      
      # 4. 运行文档健康检查
      - name: 🩺 Run documentation health check
        id: health-check
        run: |
          echo "::group::Documentation Health Check"
          npm run docs:health-check
          echo "::endgroup::"
      
      # 5. 如果是定时任务或手动触发，创建 Issue（可选）
      - name: 📝 Create issue if stale docs found
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            // 这里可以添加逻辑来解析输出并创建 Issue
            // 暂时只是注释，可以根据需要实现
            console.log('Health check completed. Check the logs above for details.');
      
      # 6. 上传检查报告作为 artifact（可选）
      - name: 📤 Upload health check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-health-check-report
          path: |
            docs/
          retention-days: 30

# 工作流权限（如果需要创建 Issue）
permissions:
  contents: read
  issues: write  # 如果要自动创建 Issue
  pull-requests: write  # 如果要在 PR 中评论

